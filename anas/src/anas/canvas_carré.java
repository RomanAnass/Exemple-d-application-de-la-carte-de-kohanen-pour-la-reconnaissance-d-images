/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package anas;

import java.awt.Canvas;
import java.awt.Color;
import java.awt.Graphics;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.util.Vector;

/**
 *
 * @author user
 */
public class canvas_carré extends javax.swing.JFrame {

    /**
     * Creates new form canvas_carré
     */
    public canvas_carré(int a) {
        initComponents();
        
        draw(a);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        grille_de_neurone = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        jLabel3.setText("jLabel3");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        grille_de_neurone.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout grille_de_neuroneLayout = new javax.swing.GroupLayout(grille_de_neurone);
        grille_de_neurone.setLayout(grille_de_neuroneLayout);
        grille_de_neuroneLayout.setHorizontalGroup(
            grille_de_neuroneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 845, Short.MAX_VALUE)
        );
        grille_de_neuroneLayout.setVerticalGroup(
            grille_de_neuroneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 526, Short.MAX_VALUE)
        );

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 0, 0));
        jLabel1.setText("                              CANVAS CARRE");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(267, 267, 267)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(grille_de_neurone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(38, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(grille_de_neurone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addContainerGap(25, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(canvas_carré.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(canvas_carré.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(canvas_carré.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(canvas_carré.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new canvas_carré(1).setVisible(true);
            }
        });
    }
    
    
     public class maps_winner extends Canvas {
    public int x,y, i;
    int dimMap;
    int el_w;
    int el_h;
    int Number_of_Node=0;
    Vector<Integer> winners;
  
  
    
    
    public maps_winner(int a) {
       
        super();
        dimMap=a;
        Number_of_Node=dimMap*dimMap;
        winners=new Vector<>();
        Vector<Integer> nodes=new Vector<>();




        int index =0;


        try {
            File file = new File("data.txt");
            FileReader fileReader = new FileReader(file);
            BufferedReader bufferedReader = new BufferedReader(fileReader);

            String line;
            while ((line = bufferedReader.readLine()) != null) {
                //nodes.add(Integer.parseInt(line.split("\t")[0]));
               // nodes.add(Integer.parseInt(line.split("\t")[1]));
               nodes.add(Integer.parseInt(line.split("\t")[1]));
               nodes.add(Integer.parseInt(line.split("\t")[0]));
               
            }
            fileReader.close();
        }
        catch (Exception e){

        }









        for(int i=0;i<dimMap;i++){
        for(int j=0;j<dimMap;j++){

            for(int x=0;x<nodes.size()-1;x+=2){


            if(j==nodes.get(x) && i==nodes.get(x+1)){

                winners.add(index);
            }
            }

            index++;
        }


    }






        
    }
      
        
        
    public void paint(Graphics g){
        //super.paint(g);
        el_w=this.getWidth()/dimMap;
        el_h=this.getHeight()/dimMap;
        g.setColor(Color.red);

                for(i=0;i<Number_of_Node;i++){
                    
                   x = (i% dimMap)*el_w;
                   y = (i/dimMap)*el_h;
                  // x = (i/dimMap)*el_h;
                   //y = (i% dimMap)*el_w; ;
                   
                    g.drawRect(x, y, el_w, el_h);

                    if(winners.contains(i)){

                        g.fillRect(x, y, el_w, el_h);
                        
                    }
               }
                
                  
                
            
        }
    
     }
    
    
    
    
    private void draw(int a) {
    
        maps_winner mw = new maps_winner(a);
        mw.setSize(700,550);
        mw.setBackground(Color.WHITE);
        //grille_de_neurone.add(mw);
        
        
        
        
        
        
       
                                                                       

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel grille_de_neurone;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    // End of variables declaration//GEN-END:variables
}
